#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>

#define MAX_ENTRIES 100
#define TIME_QUANTUM 1

// Structure to store process details
typedef struct {
    int number;            // Process ID (generated number)
    time_t arrival_time;   // Arrival time
    int memory;            // Memory required
    int priority;          // Priority
    int burst_time;        // Remaining execution time (randomly assigned for simulation)
} Process;

Process table[MAX_ENTRIES];
int count = 0;

// Function to generate a process
void generate_process() {
    if (count >= MAX_ENTRIES) {
        printf("Process table is full! Cannot generate more processes.\n");
        return;
    }

    int number = rand() % 100 + 1; // Random number between 1 and 100
    printf("Generated Process (Number): %d\n", number);

    int memory, priority;
    printf("Enter memory (in MB) for process %d: ", number);
    scanf("%d", &memory);
    printf("Enter priority (higher number = higher priority) for process %d: ", number);
    scanf("%d", &priority);

    int burst_time = rand() % 5 + 1; // Random burst time between 1 and 5 seconds

    // Store process details in the table
    table[count].number = number;
    table[count].arrival_time = time(NULL);
    table[count].memory = memory;
    table[count].priority = priority;
    table[count].burst_time = burst_time;

    printf("Process %d added with Burst Time: %d seconds\n", number, burst_time);

    count++;
}

// Function to display the process table
void display_table() {
    printf("\n--- Process Table ---\n");
    printf("Index\tNumber\tArrival Time\t\tMemory\tPriority\tBurst Time\n");
    for (int i = 0; i < count; i++) {
        printf("%d\t%d\t%s\t%dMB\t%d\t\t%d\n",
               i + 1,
               table[i].number,
               ctime(&table[i].arrival_time),
               table[i].memory,
               table[i].priority,
               table[i].burst_time);
    }
}

// Round Robin Scheduling
void round_robin() {
    int remaining_processes = count;
    int time = 0;

    printf("\n--- Starting Round Robin Scheduling ---\n");

    while (remaining_processes > 0) {
        for (int i = 0; i < count; i++) {
            if (table[i].burst_time > 0) {
                // Check if the process has arrived
                if (time >= table[i].arrival_time) {
                    printf("Time %d: Executing Process %d (Burst Time: %d, Priority: %d)\n",
                           time, table[i].number, table[i].burst_time, table[i].priority);

                    // Execute for TIME_QUANTUM or remaining burst time
                    int execution_time = (table[i].burst_time >= TIME_QUANTUM) ? TIME_QUANTUM : table[i].burst_time;
                    sleep(execution_time); // Simulate process execution
                    table[i].burst_time -= execution_time;
                    time += execution_time;

                    if (table[i].burst_time == 0) {
                        printf("Process %d completed at Time %d\n", table[i].number, time);
                        remaining_processes--;
                    }
                }
            }
        }

        // If multiple processes have the same arrival time, prioritize based on priority
        for (int i = 0; i < count - 1; i++) {
            for (int j = i + 1; j < count; j++) {
                if (table[i].arrival_time == table[j].arrival_time && table[i].priority < table[j].priority) {
                    // Swap processes
                    Process temp = table[i];
                    table[i] = table[j];
                    table[j] = temp;
                }
            }
        }
    }

    printf("--- Round Robin Scheduling Completed ---\n");
}

int main() {
    char command;

    printf("Press 'p' to generate a process or 'q' to quit and start scheduling.\n");

    while (1) {
        command = getchar();
        if (command == 'p') {
            generate_process();
        } else if (command == 'q') {
            break;
        }

        // Clear buffer to avoid accidental repeats
        while (getchar() != '\n');
    }

    display_table();
    round_robin();

    return 0;
}    
